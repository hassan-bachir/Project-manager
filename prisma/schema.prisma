
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  USER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  name         String
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  assignedTasks Task[]        @relation("AssignedTasks")
  projects     ProjectMember[]
  taskHistory  TaskHistory[]
}

model Project {
  id          String          @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ProjectStatus   @default(ACTIVE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  tasks       Task[]
  members     ProjectMember[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
}

model Task {
  id          String        @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  priority    TaskPriority
  status      TaskStatus    @default(TODO)
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  assignees   User[]        @relation("AssignedTasks")
  history     TaskHistory[]
}

model TaskHistory {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  updatedBy User     @relation(fields: [userId], references: [id])
  userId    String
  field     String
  oldValue  String?
  newValue  String?
  timestamp DateTime @default(now())
}