generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedTasks Task[]          @relation("AssignedTasks")
  projects      ProjectMember[]
  taskHistory   TaskHistory[]
  comments      Comment[]
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  tasks   Task[]
  members ProjectMember[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  createdAt DateTime @default(now())
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  priority    TaskPriority
  status      TaskStatus   @default(TODO)
  project     Project      @relation(fields: [projectId], references: [id])
  projectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  assignees User[]        @relation("AssignedTasks")
  history   TaskHistory[] 
  comments  Comment[]
  attachments Attachment[]
}

model Comment {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  content   String
  createdAt DateTime @default(now())
}

model TaskHistory {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  updatedBy User     @relation(fields: [userId], references: [id])
  userId    String
  field     String
  oldValue  String?
  newValue  String?
  timestamp DateTime @default(now())
}
model Attachment {
  id         String   @id @default(uuid())
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId     String
  filename   String
  mimeType   String
  url        String   
  uploadedAt DateTime @default(now())
}